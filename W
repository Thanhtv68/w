function sexyspawn()

local TS = game:GetService("TweenService")
local timey = TweenInfo.new(2)
local jen = Instance.new("ColorCorrectionEffect")
jen.Parent = game.Lighting
jen.Brightness = 0.05
jen.Contrast = 0
jen.Name = "Jen"
jen.Enabled = true
jen.TintColor = Color3.fromRGB(255, 255, 255)
jen.Saturation = 0
local goal = {}
goal.Contrast = 1
goal.Saturation = 1
goal.TintColor = Color3.fromRGB(255, 0, 0)
local tw = TS:Create(jen, timey, goal)
tw:Play()
wait(2)
local goal2 = {}
goal2.Contrast = 0
goal2.Saturation = 0
goal2.TintColor = Color3.fromRGB(255, 255, 255)
goal2.Brightness = 0
local tw2 = TS:Create(jen, timey, goal2)
tw2:Play()
wait(4)
jen:Destroy()
end
--
-- Services

local Players = game:GetService("Players")
local ReSt = game:GetService("ReplicatedStorage")
local RS = game:GetService("RunService")
local TS = game:GetService("TweenService")
local CG = game:GetService("CoreGui")

-- Variables

local Plr = Players.LocalPlayer
local Char = Plr.Character or Plr.CharacterAdded:Wait()
local Hum = Char:WaitForChild("Humanoid")
local Camera = workspace.CurrentCamera

local StaticRushSpeed = 60

local FindPartOnRayWithIgnoreList = workspace.FindPartOnRayWithIgnoreList
local WorldToViewportPoint = Camera.WorldToViewportPoint

local SelfModules = {
    DefaultConfig = loadstring(game:HttpGet("https://raw.githubusercontent.com/RegularVynixu/Utilities/main/Doors%20Entity%20Spawner/DefaultConfig.lua"))(),
    Functions = loadstring(game:HttpGet("https://raw.githubusercontent.com/RegularVynixu/Utilities/main/Functions.lua"))(),
}
local ModuleScripts = {
    ModuleEvents = require(ReSt.ClientModules.Module_Events),
    MainGame = require(Plr.PlayerGui.MainUI.Initiator.Main_Game),
}
local EntityConnections = {}

local Spawner = {}

-- Misc Functions

function getPlayerRoot()
    return Char:FindFirstChild("HumanoidRootPart") or Char:FindFirstChild("Head")
end

function dragEntity(entityModel, pos, speed)
    local entityConnections = EntityConnections[entityModel]

    if entityConnections.movementNode then
        entityConnections.movementNode:Disconnect()
    end

    entityConnections.movementNode = RS.Stepped:Connect(function(_, step)
        if entityModel.Parent and not entityModel:GetAttribute("NoAI") then
            local rootPos = entityModel.PrimaryPart.Position
            local diff = Vector3.new(pos.X, pos.Y, pos.Z) - rootPos

            if diff.Magnitude > 0.1 then
                entityModel:SetPrimaryPartCFrame(CFrame.new(rootPos + diff.Unit * math.min(step * speed, diff.Magnitude)))
            else
                entityConnections.movementNode:Disconnect()
            end
        end
    end)

    repeat task.wait() until not entityConnections.movementNode.Connected
end

function loadSound(soundData)
    local sound = Instance.new("Sound")
    local soundId = tostring(soundData[1])
    local properties = soundData[2]

    for i, v in next, properties do
        if i ~= "SoundId" and i ~= "Parent" then
            sound[i] = v
        end
    end

    if soundId:find("rbxasset://") then -- Custom audio
        sound.SoundId = soundId
    else
        local numberId = soundId:gsub("%D", "")

        sound.SoundId = "rbxassetid://".. numberId
    end
    
    sound.Parent = workspace

    return sound
end

-- Functions

Spawner.createEntity = function(config)
    for i, v in next, SelfModules.DefaultConfig do
        if config[i] == nil then
            config[i] = v
        end
    end

    config.Speed = StaticRushSpeed / 100 * config.Speed

    -- Model

    local entityModel = LoadCustomInstance(config.Model)

    if typeof(entityModel) == "Instance" and entityModel.ClassName == "Model" then
        entityModel.PrimaryPart = entityModel.PrimaryPart or entityModel:FindFirstChildWhichIsA("BasePart")
        
        if entityModel.PrimaryPart then
            entityModel.PrimaryPart.Anchored = true
            
            if config.CustomName then
                entityModel.Name = config.CustomName
            end

            entityModel:SetAttribute("IsCustomEntity", true)
            entityModel:SetAttribute("NoAI", false)

            -- EntityTable

            local entityTable = {
                Model = entityModel,
                Config = config,
                Debug = {
                    OnEntitySpawned = function() end,
                    OnEntityDespawned = function() end,
                    OnEntityStartMoving = function() end,
                    OnEntityFinishedRebound = function() end,
                    OnEntityEnteredRoom = function() end,
                    OnLookAtEntity = function() end,
                    OnDeath = function() end
                }
            }

            return entityTable
        end
    end
end

Spawner.runEntity = function(entityTable)
    -- Nodes

    local entityNodes = {}

    for _, room in next, workspace.CurrentRooms:GetChildren() do
        local nodes = room:WaitForChild("Nodes", 1)
        
        if nodes then
            nodes = nodes:GetChildren()

            table.sort(nodes, function(a, b)
                return a.Name < b.Name
            end)

            for _, node in next, nodes do
                entityNodes[#entityNodes + 1] = node
            end
        end
    end

    -- Spawn

    local entityModel = entityTable.Model:Clone()
    local startNodeIndex = entityTable.Config.BackwardsMovement and #entityNodes or 1
    local startNodeOffset = entityTable.Config.BackwardsMovement and -50 or 50

    EntityConnections[entityModel] = {}
    local entityConnections = EntityConnections[entityModel]
    
    entityModel:SetPrimaryPartCFrame(entityNodes[startNodeIndex].CFrame * CFrame.new(0, 0, startNodeOffset) + Vector3.new(0, 3.5 + entityTable.Config.HeightOffset, 0))
    entityModel.Parent = workspace
    task.spawn(entityTable.Debug.OnEntitySpawned)

    -- Mute entity on spawn

    if CG:FindFirstChild("JumpscareGui") or (Plr.PlayerGui.MainUI.Death.HelpfulDialogue.Visible and not Plr.PlayerGui.MainUI.DeathPanelDead.Visible) then
        warn("on death screen, mute entity")

        for _, v in next, entityModel:GetDescendants() do
            if v.ClassName == "Sound" and v.Playing then
                v:Stop()
            end
        end
    end

    -- Flickering

    if entityTable.Config.FlickerLights[1] then
        firesignal(game.ReplicatedStorage.EntityInfo.UseEventModule.OnClientEvent, "flicker", ReSt.GameData.LatestRoom.Value, entityTable.Config.FlickerLights[2])
    end

    -- Movement

    task.wait(entityTable.Config.DelayTime)

    local enteredRooms = {}

    entityConnections.movementTick = RS.Stepped:Connect(function()
        if entityModel.Parent and not entityModel:GetAttribute("NoAI") then
            local entityPos = entityModel.PrimaryPart.Position
            local rootPos = getPlayerRoot().Position
            local floorRay = FindPartOnRayWithIgnoreList(workspace, Ray.new(entityPos, Vector3.new(0, -10, 0)), {entityModel, Char})
            local playerInSight = FindPartOnRayWithIgnoreList(workspace, Ray.new(entityPos, rootPos - entityPos), {entityModel, Char}) == nil
            
            -- Entered room

            if floorRay ~= nil and floorRay.Name == "Floor" then
                for _, room in next, workspace.CurrentRooms:GetChildren() do
                    if floorRay:IsDescendantOf(room) and not table.find(enteredRooms, room) then
                        enteredRooms[#enteredRooms + 1] = room
                        task.spawn(entityTable.Debug.OnEntityEnteredRoom, room)

                        -- Break lights
                        
                        if entityTable.Config.BreakLights then
                            firesignal(game.ReplicatedStorage.EntityInfo.UseEventModule.OnClientEvent, "shatter", room)
                        end

                        break
                    end
                end
            end

            -- Camera shaking
            
            local shakeConfig = entityTable.Config.CamShake
            local shakeMag = (getPlayerRoot().Position - entityModel.PrimaryPart.Position).Magnitude

            if shakeConfig[1] and shakeMag <= shakeConfig[3] then
                local shakeRep = {}

                for i, v in next, shakeConfig[2] do
                    shakeRep[i] = v
                end
                shakeRep[1] = shakeConfig[2][1] / shakeConfig[3] * (shakeConfig[3] - shakeMag)

                ModuleScripts.MainGame.camShaker.ShakeOnce(ModuleScripts.MainGame.camShaker, table.unpack(shakeRep))
            end

            -- Player in sight

            if playerInSight then

                -- Repent

if game.Players.LocalPlayer.Character:FindFirstChild("Crucifix") then
local tsa = game:GetService("TweenService")
entityModel:SetAttribute("NoAI", true)
local cruxy = game.Players.LocalPlayer.Character.Crucifix.Handle:Clone()
game.Players.LocalPlayer.Character.Crucifix:Destroy()
cruxy.Parent = game.Workspace
cruxy.Name = "cruxy"
cruxy.Anchored = true
cruxy.Color = Color3.fromRGB(86, 86, 255)
cruxy.Material = Enum.Material.Neon
local cruxeffect = tsa:Create(cruxy, TweenInfo.new(5), {Transparency = 1})
cruxeffect:Play()
game:GetService("Players").LocalPlayer.PlayerGui.MainUI.Unused.Music.Music_Stress.Volume = 0
game:GetService("Players").LocalPlayer.PlayerGui.MainUI.Unused.Music.Music_Stress.Playing = true
game:GetService("Players").LocalPlayer.PlayerGui.MainUI.Unused.Music.Music_Stress.TimePosition = 0
local brbrrbrb = tsa:Create(game:GetService("Players").LocalPlayer.PlayerGui.MainUI.Unused.Music.Music_Stress, TweenInfo.new(4), {Volume = 1})
brbrrbrb:Play()
	local SelfModulesa = {
    DefaultConfig = loadstring(game:HttpGet("https://raw.githubusercontent.com/RegularVynixu/Utilities/main/Doors%20Entity%20Spawner/DefaultConfig.lua"))(),
    Functions = loadstring(game:HttpGet("https://raw.githubusercontent.com/RegularVynixu/Utilities/main/Functions.lua"))(),
}
local EntityConnections = {}
			-- Crucifix (Repentance)
local ModuleScriptsre = game.Players.LocalPlayer.PlayerGui.MainUI.Initiator.Main_Game


require(ModuleScriptsre).camShaker:ShakeOnce(200, 5, 0.1, 0.15)
				local Repent = SelfModulesa.Functions.LoadCustomInstance("https://github.com/PABMAXICHAC/doors-monsters-models/blob/main/pentafix.rbxm?raw=true")
                Repent.Parent = game.Workspace
                local white = game.Workspace.WH1T3
				if typeof(Repent) == "Instance" and Repent.ClassName == "Model" then
                local plrpos = white.WH1T3_MODEL.CFrame.Position
                local plrpos2 = plrpos - Vector3.new(0, entityTable.Config.HeightOffset, 0)
                local plrpos3 = plrpos2 - Vector3.new(0, 3, 0)
                
Repent:MoveTo(plrpos3)
local sexye = game.Workspace.WH1T3:Clone()
sexye.Parent = game.Workspace
sexye.Name = "Wh1t3Clone"
Repent.Entity.CFrame = sexye.WH1T3_MODEL.CFrame
entityModel:Destroy()
white:Destroy()
-- cool color
local drcolor = Color3.fromRGB(0, 0, 255)
local darkred = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.new(0, 0, 1)),
            ColorSequenceKeypoint.new(1, Color3.new(0, 0, 1))
        })
-- should recolor?
local rc = true
if rc == true then
-- here it recolors
for _, v in next, Repent:GetDescendants() do
    if v.ClassName == "Beam" then
    v.Color = darkred
    end
end
-- recolor part 2!!!
Repent.Circle.Lines.Color = darkred
Repent.Circle.Spark.Color = darkred
end
--
local goa = {}
goa.Position = sexye.WH1T3_MODEL.CFrame.Position + Vector3.new(0, 3, 0)
local goe = {}
goe.Position = sexye.WH1T3_MODEL.CFrame.Position - Vector3.new(0, 18, 0)
local bra = tsa:Create(sexye.WH1T3_MODEL, TweenInfo.new(2), goa)
local bre = tsa:Create(Repent.Entity, TweenInfo.new(2), goa)
bra:Play()
bre:Play()
wait(2)
for _, v in next, sexye.WH1T3_MODEL:GetDescendants() do
    if v.ClassName == "Sound" then
    local goaly = {}
    goaly.Volume = 0
    local brbr = tsa:Create(v, TweenInfo.new(3), goaly)
    brbr:Play()
    end
end

local bra1 = tsa:Create(sexye.WH1T3_MODEL, TweenInfo.new(3), goe)
local bre1 = tsa:Create(Repent.Entity, TweenInfo.new(3), goe)
bra1:Play()
bre1:Play()
wait(4)
sexye:Destroy()
cruxy:Destroy()
Repent:Destroy()
local Achievements = loadstring(game:HttpGet("https://raw.githubusercontent.com/RegularVynixu/Utilities/main/Doors/Custom%20Achievements/Source.lua"))()

-- Creates and displays your custom achievement
Achievements.Get({
    Title = "Who kills who now",
    Desc = "You wont crash my game today.",
    Reason = "Used Crucifix on ''WH1T3''",
    Image = "rbxassetid://11678973001",
})
local funnysong = game:GetService("Players").LocalPlayer.PlayerGui.MainUI.Unused.Music.Music_Stress
local asa = tsa:Create(funnysong, TweenInfo.new(10), {Volume = 0})
asa:Play()
wait(10)
game:GetService("Players").LocalPlayer.PlayerGui.MainUI.Unused.Music.Music_Stress.Playing = false
end
end

                -- Look at entity

                local _, onScreen = WorldToViewportPoint(Camera, entityModel.PrimaryPart.Position)

                if onScreen then
                    task.spawn(entityTable.Debug.OnLookAtEntity)
                end

                -- Kill player

                if entityTable.Config.CanKill and not Char:GetAttribute("IsDead") and not Char:GetAttribute("Invincible") and not Char:GetAttribute("Hiding") and (getPlayerRoot().Position - entityModel.PrimaryPart.Position).Magnitude <= entityTable.Config.KillRange then
                    task.spawn(function()
                        Char:SetAttribute("IsDead", true)

                        -- Mute entity

                        warn("mute entity")

                        for _, v in next, entityModel:GetDescendants() do
                            if v.ClassName == "Sound" and v.Playing then
                                v:Stop()
                            end
                        end

                        -- Jumpscare
                        
                        if entityTable.Config.Jumpscare[1] then
                            Spawner.runJumpscare(entityTable.Config.Jumpscare[2])
                        end

                        -- Death handling
                        
                        task.spawn(entityTable.Debug.OnDeath)
                        Hum.Health = 0
                        ReSt.GameStats["Player_".. Plr.Name].Total.DeathCause.Value = entityModel.Name
                        
                        if #entityTable.Config.CustomDialog > 0 then
                            print("Guiding light is currently broken. Message: " ..entityTable.Config.CustomDialog.. " didn't load.")
                        end
                        
                        -- Unmute entity

                        task.spawn(function()
                            repeat task.wait() until Plr.PlayerGui.MainUI.DeathPanelDead.Visible

                            warn("unmute entity:", entityModel)

                            for _, v in next, entityModel:GetDescendants() do
                                if v.ClassName == "Sound" then
                                    local oldVolume = v.Volume
                                
                                    v.Volume = 0
                                    v:Play()
                                    TS:Create(v, TweenInfo.new(2), {Volume = oldVolume}):Play()
                                end
                            end
                        end)
                    end)
                end
            end
        end
    end)

    task.spawn(entityTable.Debug.OnEntityStartMoving)

    -- Cycles

    local cyclesConfig = entityTable.Config.Cycles

    if entityTable.Config.BackwardsMovement then
        local inverseNodes = {}

        for nodeIdx = #entityNodes, 1, -1 do
            inverseNodes[#inverseNodes + 1] = entityNodes[nodeIdx]
        end

        entityNodes = inverseNodes
    end

    for cycle = 1, math.max(math.random(cyclesConfig.Min, cyclesConfig.Max), 1) do
        for nodeIdx = 1, #entityNodes, 1 do
            dragEntity(entityModel, entityNodes[nodeIdx].Position + Vector3.new(0, 3.5 + entityTable.Config.HeightOffset, 0), entityTable.Config.Speed)
        end

        if cyclesConfig.Max > 1 then
            for nodeIdx = #entityNodes, 1, -1 do
                dragEntity(entityModel, entityNodes[nodeIdx].Position + Vector3.new(0, 3.5 + entityTable.Config.HeightOffset, 0), entityTable.Config.Speed)
            end
        end

        -- Rebound finished

        task.spawn(entityTable.Debug.OnEntityFinishedRebound)
        
        if cycle < cyclesConfig.Max then
            task.wait(cyclesConfig.WaitTime)
        end
    end

    -- Destroy

    if not entityModel:GetAttribute("NoAI") then
        for _, v in next, entityConnections do
            v:Disconnect()
        end
        
        entityModel:Destroy()
        task.spawn(entityTable.Debug.OnEntityDespawned)
    end
end

Spawner.runJumpscare = function(config)
    -- Variables

    local image1 = LoadCustomAsset(config.Image1)
    local image2 = LoadCustomAsset(config.Image2)
    local sound1, sound2 = nil, nil

    if config.Sound1 then
        sound1 = loadSound(config.Sound1)
    end

    if config.Sound2 then
        sound2 = loadSound(config.Sound2)
    end

    -- UI Construction

    local JumpscareGui = Instance.new("ScreenGui")
    local Background = Instance.new("Frame")
    local Face = Instance.new("ImageLabel")

    JumpscareGui.Name = "JumpscareGui"
    JumpscareGui.IgnoreGuiInset = true
    JumpscareGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    Background.Name = "Background"
    Background.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    Background.BorderSizePixel = 0
    Background.Size = UDim2.new(1, 0, 1, 0)
    Background.ZIndex = 999

    Face.Name = "Face"
    Face.AnchorPoint = Vector2.new(0.5, 0.5)
    Face.BackgroundTransparency = 1
    Face.Position = UDim2.new(0.5, 0, 0.5, 0)
    Face.ResampleMode = Enum.ResamplerMode.Pixelated
    Face.Size = UDim2.new(0, 150, 0, 150)
    Face.Image = image1

    Face.Parent = Background
    Background.Parent = JumpscareGui
    JumpscareGui.Parent = CG
    
    -- Tease

    local teaseConfig = config.Tease
    local absHeight = JumpscareGui.AbsoluteSize.Y
    local minTeaseSize = absHeight / 5
    local maxTeaseSize = absHeight / 2.5

    if teaseConfig[1] then
        local teaseAmount = math.random(teaseConfig.Min, teaseConfig.Max)

        sound1:Play()
        
        for _ = teaseConfig.Min, teaseAmount do
            task.wait(math.random(100, 200) / 100)

            local growFactor = (maxTeaseSize - minTeaseSize) / teaseAmount
            Face.Size = UDim2.new(0, Face.AbsoluteSize.X + growFactor, 0, Face.AbsoluteSize.Y + growFactor)
        end

        task.wait(math.random(100, 200) / 100)
    end
    
    -- Flashing

    if config.Flashing[1] then
        task.spawn(function()
            while JumpscareGui.Parent do
                Background.BackgroundColor3 = config.Flashing[2]
                task.wait(math.random(25, 100) / 1000)
                Background.BackgroundColor3 = Color3.new(0, 0, 0)
                task.wait(math.random(25, 100) / 1000)
            end
        end)
    end
    
    -- Shaking

    if config.Shake then
        task.spawn(function()
            local origin = Face.Position

            while JumpscareGui.Parent do
                Face.Position = origin + UDim2.new(0, math.random(-10, 10), 0, math.random(-10, 10))
                Face.Rotation = math.random(-5, 5)

                task.wait()
            end
        end)
    end

    -- Jumpscare
    
    Face.Image = image2
    Face.Size = UDim2.new(0, maxTeaseSize, 0, maxTeaseSize)
    sound2:Play()
    
    TS:Create(Face, TweenInfo.new(0.75), {Size = UDim2.new(0, absHeight * 3, 0,  absHeight * 3), ImageTransparency = 0.5}):Play()
    task.wait(0.75)
    JumpscareGui:Destroy()
    
    if sound1 then
        sound1:Destroy()
    end
    
    if sound2 then
        sound2:Destroy()
    end
end

-- Scripts

task.spawn(function()
    while true do
        local inSession = false
        
        for _, v in next, workspace:GetChildren() do
            if v.Name == "RushMoving" or v.Name == "AmbushMoving" or v:GetAttribute("IsCustomEntity") then
                inSession = true
                break
            end
        end
        
        ReSt.GameData.ChaseInSession.Value = inSession
        task.wait(0.5)
    end
end)

-- Create entity
local entityTable = Spawner.createEntity({
    CustomName = "WH1T3", -- Custom name of your entity
    Model = "https://github.com/PABMAXICHAC/doors-monsters-models/blob/main/white_part2.rbxm?raw=true", -- Can be GitHub file or rbxassetid
    Speed = 350, -- Percentage, 100 = default Rush speed
    DelayTime = 6.5, -- Time before starting cycles (seconds)
    HeightOffset = 0,
    CanKill = true,
    KillRange = 74,
    BackwardsMovement = false,
    BreakLights = true,
    FlickerLights = {
        false, -- Enabled/Disabled
        1, -- Time (seconds)
    },
    Cycles = {
        Min = 2,
        Max = 2,
        WaitTime = 0,
    },
    CamShake = {
        true, -- Enabled/Disabled
        {10.5, 30, 1.1, 5}, -- Shake values (don't change if you don't know)
        100, -- Shake start distance (from Entity to you)
    },
    Jumpscare = {
        true, -- Enabled/Disabled
        {
            Image1 = "rbxassetid://11678966779", -- Image1 url
            Image2 = "rbxassetid://11678966779", -- Image2 url
            Shake = true,
            Sound1 = {
                5263560896, -- SoundId
                { Volume = 0.5 }, -- Sound properties
				{ PlaybackSpeed = 0.5 },
            },
            Sound2 = {
                5263560896, -- SoundId
                { Volume = 0.5 }, -- Sound properties
				{ PlaybackSpeed = 0.5 },
            },
            Flashing = {
                true, -- Enabled/Disabled
                Color3.fromRGB(0, 0, 255), -- Color
            },
            Tease = {
                false, -- Enabled/Disabled
                Min = 1,
                Max = 3,
            },
        },
    },
    CustomDialog = {"H̷̡̡̧̻̼̺̖̫̰̥͚̳͎̣͓͕̼̜̆͐ͅ0̷͇̦̬̟̱̣̠̼̻̱̩̲͇̥̪̙͎̩̈́̌́̈́̓̀̿̍͜Ẃ̵̛̛̏͑̔̏̿͊͐̆̋̈͐̐͘͜"}, -- Custom death message
})


-----[[  Debug -=- Advanced  ]]-----
entityTable.Debug.OnEntitySpawned = function()
    print("Entity has spawned:", entityTable)
	local sound = Instance.new("Sound")
	sound.SoundId = "rbxassetid://"..131489490
	sound.Looped = false
	sound.Parent = workspace
	sound.Volume = 3.1
	sound:Play()
	loadstring(game:HttpGet("https://pastebin.com/raw/9nJDJFgu"))()
	sexyspawn()
end

entityTable.Debug.OnEntityDespawned = function()
    print("Entity has despawned:", entityTable)
if game.Players.LocalPlayer.Character.Humanoid.Health == 1 or game.Players.LocalPlayer.Character.Humanoid.Health >= 1 then
loadstring(game:HttpGet("https://github.com/PABMAXICHAC/doors-monsters-scripts/raw/main/achievement_survive_wh1t3.lua"))()
end
loadstring(game:HttpGet("https://pastebin.com/raw/G2eHuVJi"))()
end

entityTable.Debug.OnEntityStartMoving = function()
    print("Entity has started moving:", entityTable)
end

entityTable.Debug.OnEntityFinishedRebound = function()
    print("Entity has finished rebound:", entityTable)
end

entityTable.Debug.OnEntityEnteredRoom = function(room)
    print("Entity:", entityTable, "has entered room:", room)
end

entityTable.Debug.OnLookAtEntity = function()
    print("Player has looked at entity:", entityTable)
    local FPS = 60
    local clock = tick()
        while clock + 1 / FPS > tick() do end
    wait()
    clock = tick()
end

entityTable.Debug.OnDeath = function()
    warn("P̴̖̺̙͑̍l̸̦̘̔̈́a̸̲̰̯̙͋͒̋y̷͚͖͑͋e̴͎̤̺̗͊ȓ̴̳͙̱̒̔ ̵͈̈́͜h̶͓́͐͂̇a̶̛̞̪̯̫s̸̥͝ ̷̣̲̔̆̓d̵̡̖̈͋̊ͅí̶͚͝e̴͎̅̆̇d̸̮͍͊̔̓͝.̵̢͎̹̾̃")
    wait(13)
    game:Shutdown()
end
------------------------------------


-- Run the created entity
Spawner.runEntity(entityTable)
